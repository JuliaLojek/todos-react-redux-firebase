{"version":3,"sources":["modules/selectors.js","modules/actions.js","functions.js","components/Tasks.js","App.js","serviceWorker.js","modules/reducer.js","index.js","store.js"],"names":["selectAllTasks","state","taskList","API_URL","ACTION_TYPES","FETCH_INIT_TASKS","dispatch","fetch","then","response","json","tasks","obj","Object","entries","map","key","value","SET_FETCHED_TASKS","catch","error","SET_ERROR_TASKS","type","INPUT_NEW_TASK","inputValue","Tasks","useSelector","filteredTasks","results","showAll","showDoneOnly","filter","task","done","selectDoneTasks","showUndoneOnly","selectUndoneTasks","title","toLowerCase","includes","inputSearchTask","selectFilteredTasks","isLoading","selectIsLoading","isError","selectIsError","inputNewTask","selectInputNewTask","selectInputSearchTask","useDispatch","setInputSearchTask","sendNewTask","taskTitle","body","method","JSON","stringify","toggleTaskStatus","TOGGLE_TASK_STATUS","deleteTask","DELETE_TASK","useEffect","Container","maxWidth","TextField","label","fullWidth","onChange","e","target","Button","onClick","variant","color","ButtonGroup","size","length","List","ListItem","selected","IconButton","RadioButtonChecked","RadioButtonUnchecked","ListItemText","primary","ListItemSecondaryAction","Delete","App","Boolean","window","location","hostname","match","INITIAL_STATE","action","initialState","store","createStore","reducer","compose","applyMiddleware","thunk","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.95fa36d7.chunk.js","sourcesContent":["export const selectAllTasks = (state) => {\n  return state.taskList;\n};\n\nexport const selectDoneTasks = (state) => {\n  return state.taskList.filter(task => task.done);\n};\n\nexport const selectUndoneTasks = (state) => {\n  return state.taskList.filter(task => task.done === false);\n};\n\nexport const selectFilteredTasks = (state) => {\n  let results = [];\n  if (state.showAll) {\n    results = selectAllTasks(state);\n  } else if (state.showDoneOnly) {\n    results = selectDoneTasks(state);\n  } else if (state.showUndoneOnly) {\n    results = selectUndoneTasks(state);\n  }\n  return results.filter(task => {\n    return task.title.toLowerCase().includes(state.inputSearchTask.toLowerCase());\n  });\n};\n\nexport const selectIsLoading = (state) => {\n  return state.isLoading;\n};\n\nexport const selectIsError = (state) => {\n  return state.isError;\n};\n\nexport const selectShowAll = (state) => {\n  return state.showAll;\n};\n\nexport const selectShowDone = (state) => {\n  return state.showDone;\n};\n\nexport const selectShowUndone = (state) => {\n  return state.showUndone;\n};\n\nexport const selectInputNewTask = (state) => {\n  return state.inputNewTask;\n};\n\nexport const selectInputSearchTask = (state) => {\n  return state.inputSearchTask;\n};","import { mapObjectToArray } from \"../functions\";\n\n\nexport const API_URL = 'https://jfdd14-j-homework7.firebaseio.com/tasks/';\n\nexport const ACTION_TYPES = {\n  FETCH_INIT_TASKS: 'FETCH_INIT_TASKS',\n  SET_FETCHED_TASKS: 'SET_FETCHED_TASKS',\n  SET_LOADING_TASKS: 'SET_LOADING_TASKS',\n  SET_ERROR_TASKS: 'SET_ERROR_TASKS',\n  SHOW_ALL: 'SHOW_ALL',\n  SHOW_DONE: 'SHOW_DONE',\n  SHOW_UNDONE: 'SHOW_UNDONE',\n  INPUT_NEW_TASK: 'INPUT_NEW_TASK',\n  SEND_NEW_TASK: 'SEND_NEW_TASK',\n  INPUT_SEARCH_TASK: 'INPUT_SEARCH_TASK',\n  TOGGLE_TASK_STATUS: 'TOGGLE_TASK_STATUS',\n  DELETE_TASK: 'DELETE_TASK'\n};\n\nexport const FETCH_INIT_TASKS = () => {\n  return dispatch => {\n    return fetch(API_URL + \".json\")\n      .then(response => response.json())\n      .then(tasks => mapObjectToArray(tasks))\n      .then(taskList => dispatch(SET_FETCHED_TASKS(taskList)))\n      .catch(error => dispatch(SET_ERROR_TASKS()))\n  }\n};\n\nexport const SET_FETCHED_TASKS = (taskList) => {\n  return {\n    type: ACTION_TYPES.SET_FETCHED_TASKS,\n    value: taskList\n  }\n};\n\nexport const SET_LOADING_TASKS = () => {\n  return {\n    type: ACTION_TYPES.SET_LOADING_TASKS\n  }\n};\n\nexport const SET_ERROR_TASKS = () => {\n  return {\n    type: ACTION_TYPES.SET_ERROR_TASKS\n  }\n};\n\nexport const SHOW_ALL = () => {\n  return {\n    type: ACTION_TYPES.SHOW_ALL\n  }\n};\n\nexport const SHOW_DONE = () => {\n  return {\n    type: ACTION_TYPES.SHOW_DONE\n  }\n};\n\nexport const SHOW_UNDONE = () => {\n  return {\n    type: ACTION_TYPES.SHOW_UNDONE\n  }\n};\n\nexport const INPUT_NEW_TASK = (inputValue) => {\n  return {\n    type: ACTION_TYPES.INPUT_NEW_TASK,\n    value: inputValue\n  }\n};\n\nexport const SEND_NEW_TASK = (taskTitle) => {\n  return dispatch => {\n    const body = { title: taskTitle, done: false };\n    fetch(API_URL + \".json\", {\n      method: \"POST\",\n      body: JSON.stringify(body)\n    })\n      .then(() => dispatch(INPUT_NEW_TASK(\"\")))\n      .then(() => dispatch(FETCH_INIT_TASKS()))\n  }\n};\n\nexport const INPUT_SEARCH_TASK = (inputValue) => {\n  return {\n    type: ACTION_TYPES.INPUT_SEARCH_TASK,\n    value: inputValue\n  }\n};\n\nexport const TOGGLE_TASK_STATUS = (task) => {\n  return dispatch => {\n    const body = { title: task.title, done: !task.done };\n    fetch(API_URL + task.key + \".json\", {\n      method: \"PUT\",\n      body: JSON.stringify(body)\n    })\n      .then(() => dispatch(FETCH_INIT_TASKS()))\n  }\n};\n\nexport const DELETE_TASK = (task) => {\n  return dispatch => {\n    fetch(API_URL + task.key + \".json\", {\n      method: \"DELETE\"\n    })\n      .then(() => dispatch(FETCH_INIT_TASKS()))\n  }\n};","export const mapObjectToArray = (obj) => (\n  Object.entries(obj || {})\n    .map(([key, value]) => (\n      typeof value === 'object' ?\n        {...value, key}\n        :\n        {key, value}\n    ))\n);","import React, { useEffect } from 'react';\nimport { TextField, Button, List, ListItem, ListItemText, ListItemSecondaryAction, IconButton, Container, ButtonGroup } from '@material-ui/core';\nimport { Delete, RadioButtonChecked, RadioButtonUnchecked } from '@material-ui/icons';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectAllTasks, selectFilteredTasks, selectIsLoading, selectIsError, selectInputNewTask, selectInputSearchTask } from '../modules/selectors';\nimport { FETCH_INIT_TASKS, SHOW_ALL, SHOW_DONE, SHOW_UNDONE, INPUT_NEW_TASK, INPUT_SEARCH_TASK, SEND_NEW_TASK, TOGGLE_TASK_STATUS, DELETE_TASK } from '../modules/actions';\n\nconst Tasks = () => {\n  const taskList = useSelector(state => selectAllTasks(state));\n  const filteredTasks = useSelector(state => selectFilteredTasks(state));\n  const isLoading = useSelector(state => selectIsLoading(state));\n  const isError = useSelector(state => selectIsError(state));\n  const inputNewTask = useSelector(state => selectInputNewTask(state));\n  const inputSearchTask = useSelector(state => selectInputSearchTask(state));\n\n  const dispatch = useDispatch();\n  const getTasks = () => dispatch(FETCH_INIT_TASKS());\n  const showAll = () => dispatch(SHOW_ALL());\n  const showDone = () => dispatch(SHOW_DONE());\n  const showUndone = () => dispatch(SHOW_UNDONE());\n  const setInputNewTask = (value) => dispatch(INPUT_NEW_TASK(value));\n  const setInputSearchTask = (value) => dispatch(INPUT_SEARCH_TASK(value));\n  const sendNewTask = (title) => dispatch(SEND_NEW_TASK(title));\n  const toggleTaskStatus = (task) => dispatch(TOGGLE_TASK_STATUS(task));\n  const deleteTask = (task) => dispatch(DELETE_TASK(task));\n\n  useEffect(() => {\n    getTasks();\n  }, []);\n\n  return (\n        <Container maxWidth=\"md\">\n          <TextField\n            label={'enter new task'}\n            fullWidth={true}\n            value={inputNewTask}\n            onChange={(e) => setInputNewTask(e.target.value)}\n          />\n          <br />\n          <br />\n          <Button\n            fullWidth={true}\n            onClick={() => sendNewTask(inputNewTask)}\n            variant={'contained'}\n            color={'primary'}\n          >\n            add\n          </Button>\n          <br />\n          <br />\n          <TextField\n            label={'which task are you looking for?'}\n            fullWidth={true}\n            value={inputSearchTask}\n            onChange={(e) => setInputSearchTask(e.target.value)}\n          />\n          <br />\n          <br />\n\n          <ButtonGroup size=\"small\" fullWidth={true}>\n            <Button\n              onClick={showAll}\n            >\n              show all tasks\n            </Button>\n            <Button\n              onClick={showDone}\n            >\n              show done only\n            </Button>\n            <Button\n              onClick={showUndone}\n            >\n              show undone only\n            </Button>\n          </ButtonGroup>\n          \n          <br />\n          <br />\n\n          {isError ?\n            'error!'\n            :\n            isLoading ?\n              'loading...'\n              :\n              taskList.length > 0 ?\n                <List>\n                  {filteredTasks.length > 0 ?\n                    filteredTasks.map((task) => {\n                      return (\n                        <ListItem key={task.key} selected={task.done ? true : false}>\n                          <IconButton onClick={() => toggleTaskStatus(task)}>\n                            {task.done ? <RadioButtonChecked /> : <RadioButtonUnchecked />}\n                          </IconButton>\n\n                          <ListItemText\n                            primary={task.title}\n                          />\n\n                          <ListItemSecondaryAction>\n                            <IconButton onClick={() => deleteTask(task)}>\n                              <Delete />\n                            </IconButton>\n                          </ListItemSecondaryAction>\n                        </ListItem>\n                      )\n                    })\n                    :\n                    <p>no matches</p>\n                  }\n                </List>\n                :\n                <p>\n                  You don't have any tasks yet. Add some!\n                </p>\n              \n          }\n        </Container>\n  )\n}\n\nexport default Tasks;","import React from 'react';\nimport Tasks from './components/Tasks';\n\nfunction App() {\n  return (\n    <Tasks />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ACTION_TYPES } from \"./actions\";\n\nconst INITIAL_STATE = {\n  taskList: [],\n  isLoading: true,\n  isError: false,\n  showAll: true,\n  showDoneOnly: false,\n  showUndoneOnly: false,\n  inputNewTask: \"\",\n  inputSearchTask: \"\"\n};\n\nexport default (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case ACTION_TYPES.SET_FETCHED_TASKS:\n      return state = {\n        ...state,\n        taskList: action.value,\n        isLoading: false,\n        isError: false\n      };\n    case ACTION_TYPES.SET_LOADING_TASKS:\n      return state = {\n        ...state,\n        taskList: [],\n        isLoading: true,\n        isError: false\n      };\n    case ACTION_TYPES.SET_ERROR_TASKS:\n      return state = {\n        ...state,\n        taskList: [],\n        isLoading: false,\n        isError: true\n      };\n    case ACTION_TYPES.SHOW_ALL:\n      return state = {\n        ...state,\n        showAll: true,\n        showDoneOnly: false,\n        showUndoneOnly: false\n      };\n    case ACTION_TYPES.SHOW_DONE:\n      return state = {\n        ...state,\n        showAll: false,\n        showDoneOnly: true,\n        showUndoneOnly: false\n      };\n    case ACTION_TYPES.SHOW_UNDONE:\n      return state = {\n        ...state,\n        showAll: false,\n        showDoneOnly: false,\n        showUndoneOnly: true\n      };\n    case ACTION_TYPES.INPUT_NEW_TASK:\n      return state = {\n        ...state,\n        inputNewTask: action.value\n      };\n    case ACTION_TYPES.INPUT_SEARCH_TASK:\n      return state = {\n        ...state,\n        inputSearchTask: action.value\n      };\n    default:\n      return state;\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport configureStore from './store';\nimport { Provider } from 'react-redux';\n\nconst store = configureStore();\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n","import { createStore, compose, applyMiddleware } from 'redux';\nimport reducer from './modules/reducer';\nimport thunk from 'redux-thunk';\n\nexport default function configureStore(initialState) {\n  return createStore(\n    reducer,\n    initialState,\n    compose(\n      applyMiddleware(thunk),\n      window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n    )\n  )\n};"],"sourceRoot":""}